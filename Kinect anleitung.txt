how to create a c++  app with Qt and Kincet support
Pre Install
VisualStudio2013 / 2015
-> https://e5.onthehub.com/WebStore/OfferingDetails.aspx?o=631da0e7-2038-e311-93f6-
b8ca3a5db7a1&pmv=00000000-0000-0000-0000-000000000000&ws=77000217-8b6f-e011-
971f-0030487d8897&vsro=8

Weiter verwenden wir Qt5 als Bibliothek für die GUI Erstellung. Diese bekommt Ihr unter
folgender Adresse:
QT 5.6.0 (LPGL)
-> http://download.qt.io/official_releases/qt/5.6/5.6.0/qt-opensource-windows-x86-msvc2013-
5.6.0.exe

Zur Integration in die Entwicklungsumgebung Visual Studio brauchen wir dann noch
folgendes Programmpaket:
QT VSAddin -> http://download.qt.io/official_releases/vsaddin/qt-vs-addin-1.2.4-opensource.exe


TODO :
add Kinekt SDK 



Create a project

1. Datei -> Neu-> Vorlagen-> Visual Basic -> Qt5 Projekt -> QtApplication -> Check points ( Core, GUI, Widgets) -> Weiter -> Basis Klasse -> Qwidget auswählen 

Linken 
1. Project Eigenschaften -> C/C++  -> Allgemein -> Zusätzliche Includeverzeichisse ->Bearbeiten -> 
In neue Line Pfard zu header hinzufügen
: C:\Program Files\Microsoft SDKs\Kinect\v2.0_1409\inc

2. Project Eigenschaften -> Linker -> Allgemein -> Zusätzliche  Bibliothekverzeichnisse -> Bearbeiten- >
In neue Line Pfard zu *.lib hinzufügen

C:\Program Files\Microsoft SDKs\Kinect\v2.0_1409\Lib\x86
( $(QTDIR)\lib ) muss schon vorhandeln sein.

3. Project Eigenschaften -> Linker -> Eingabe-> Zusätzliche  Abhängigkeiten-> Bearbeiten- >
kinect20.lib
( Müssen shon da sein 
qtmaind.lib
Qt5Cored.lib
Qt5Guid.lib
Qt5Widgetsd.lib) 
4. In header 
#include <Kinect.h>

Mehr Beispile hier:
https://github.com/UnaNancyOwen/Kinect2Sample


Testqt.h
#ifndef TESTQT_H
#define TESTQT_H

#include <QtWidgets/QWidget>
#include "ui_testqt.h"
#include <Kinect.h>

class TestQT : public QWidget
{
	Q_OBJECT

public:
	TestQT(QWidget *parent = 0);
	~TestQT();

private:
	// Current Kinect
	IKinectSensor*          m_pKinectSensor;
	ICoordinateMapper*      m_pCoordinateMapper;

	// Body reader
	IBodyFrameReader*       m_pBodyFrameReader;

	Ui::TestQTClass ui;

	/// <summary>
	/// Initializes the default Kinect sensor
	/// </summary>
	/// <returns>S_OK on success, otherwise failure code</returns>
	HRESULT                 InitializeDefaultSensor();
};

#endif // TESTQT_H


Testqt.cpp
#include "testqt.h"
#include <iostream>
TestQT::TestQT(QWidget *parent)
	: QWidget(parent)
{
	ui.setupUi(this);

	InitializeDefaultSensor();
}

TestQT::~TestQT()
{

}

// Safe release for interfaces
template<class Interface>
inline void SafeRelease(Interface *& pInterfaceToRelease)
{
	if (pInterfaceToRelease != NULL)
	{
		pInterfaceToRelease->Release();
		pInterfaceToRelease = NULL;
	}
}

/// <summary>
/// Initializes the default Kinect sensor
/// </summary>
/// <returns>indicates success or failure</returns>
HRESULT TestQT::InitializeDefaultSensor()
{
	IKinectSensor* pSensor;
	HRESULT hResult = S_OK;
	hResult = GetDefaultKinectSensor(&pSensor);
	if (FAILED(hResult)){
		std::cerr << "Error : GetDefaultKinectSensor" << std::endl;
		return -1;
	}

	HRESULT hr;

	hr = GetDefaultKinectSensor(&m_pKinectSensor);
	if (FAILED(hr))
	{
		return hr;
	}

	if (m_pKinectSensor)
	{
		// Initialize the Kinect and get coordinate mapper and the body reader
		IBodyFrameSource* pBodyFrameSource = NULL;

		hr = m_pKinectSensor->Open();  // EIGENTLICH WIRD DER SENSOR HIER  EINGESCHALTET

		if (SUCCEEDED(hr))
		{
			hr = m_pKinectSensor->get_CoordinateMapper(&m_pCoordinateMapper);
		}

		if (SUCCEEDED(hr))
		{
			hr = m_pKinectSensor->get_BodyFrameSource(&pBodyFrameSource);
		}

		if (SUCCEEDED(hr))
		{
			hr = pBodyFrameSource->OpenReader(&m_pBodyFrameReader);
		}

		SafeRelease(pBodyFrameSource);
	}

	if (!m_pKinectSensor || FAILED(hr))
	{
		//SetStatusMessage(L"No ready Kinect found!", 10000, true);
		return E_FAIL;
	}

	return hr;
}

Main

#include "testqt.h"
#include <QtWidgets/QApplication>

int main(int argc, char *argv[])
{
	QApplication a(argc, argv);
	TestQT w;
	w.show();
	return a.exec();
}
